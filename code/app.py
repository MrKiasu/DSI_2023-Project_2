{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92122ac5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pickle\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "def main():\n",
    "    style = \"\"\"<div style='background-color:pink; padding:12px'>\n",
    "              <h1 style='color:black'>House Price Prediction App</h1>\n",
    "       </div>\"\"\"\n",
    "    st.markdown(style, unsafe_allow_html=True)\n",
    "    left, right = st.columns((2,2))\n",
    "    tranc_year = left.number_input(\"The year of when this prediction is for\", step = 1.0, format=\"%d\", value = 2023)\n",
    "    floor_area_sqm = right.number_input(\"Target Floor Area (sqm)\",  step = 1.0, format='%d', value = 100)\n",
    "    hdb_age = left.number_input(\"Target HDB Age\", min_value = 5, step = 1.0, format='%d', value = 5)\n",
    "    flat_model = right.number_input('How many rooms are there in the house?', step=1.0, format='%.1f', value=56.0)\n",
    "    #flat_type = st.selectbox(\"What flat type ?\", (\"1 ROOM\", \"2 ROOM\", \"3 ROOM\", \"4 ROOM\", \"5 ROOM\", \"EXECUTIVE\", \"MULTI-GENERATION\"))\n",
    "    #flat_model = st.selectbox(\"What flat type ?\", (\"Adjoined flat\", \"Apartment\", \"DBSS\", \"4 ROOM\", \"5 ROOM\", \"EXECUTIVE\", \"MULTI-GENERATION\"))\n",
    "    full_flat_type = st.selectbox(\"What flat type-model ?\", \n",
    "                             (\"1 ROOM - Improved\", \"2 ROOM - DBSS\", \n",
    "                              \"2 ROOM - Improved\", \"2 ROOM - Model A\",\n",
    "                              \"2 ROOM - Premium Apartment\", \"2 ROOM - Standard\",                                             \n",
    "                              \"3 ROOM - DBSS\", \"3 ROOM - Improved\",\n",
    "                              \"3 ROOM - Model A\", \"3 ROOM - New Generation\",\n",
    "                              \"3 ROOM - Premium Apartment\", \"3 ROOM - Simplified\",\n",
    "                              \"3 ROOM - Standard\", \"3 ROOM - Terrace\",\n",
    "                              \"4 ROOM - Adjoined flat\", \"4 ROOM - DBSS\",\n",
    "                              \"4 ROOM - Improved\", \"4 ROOM - Model A\",\n",
    "                              \"4 ROOM - Model A2\", \"4 ROOM - New Generation\",\n",
    "                              \"4 ROOM - Premium Apartment\", \"4 ROOM - Premium Apartment Loft\",\n",
    "                              \"4 ROOM - Simplified\",\"4 ROOM - Standard\",\"4 ROOM - Terrace\",\n",
    "                              \"4 ROOM - Type S1\",\"5 ROOM - Adjoined flat\",\"5 ROOM - DBSS\",\n",
    "                              \"5 ROOM - Improved\",\"5 ROOM - Improved-Maisonette\",\n",
    "                              \"5 ROOM - Model A\",\"5 ROOM - Model A-Maisonette\",\n",
    "                              \"5 ROOM - Premium Apartment\",\"5 ROOM - Premium Apartment Loft\",\n",
    "                              \"5 ROOM - Standard\", \"5 ROOM - Type S2\", \"EXECUTIVE - Adjoined flat\",\n",
    "                              \"EXECUTIVE - Apartment\",\"EXECUTIVE - Maisonette\",\n",
    "                              \"EXECUTIVE - Premium Apartment\",\n",
    "                              \"EXECUTIVE - Premium Maisonette\", \n",
    "                              \"MULTI-GENERATION - Multi Generation\" ))\n",
    "    \n",
    "    full_flat_type = st.selectbox(\"Distance to CDB Area?\", \n",
    "                             (\"Walkable (<2km)\", \"15mins Bus/MRT Trip (2 to 5km)\", \n",
    "                              \"30mins Bus/MRT Trip (5 to 10km)\", \"1hr Bus/MRT Trip (10 to 20km)\",))\n",
    "    \n",
    "    full_flat_type = st.selectbox(\"Floor Level?\", \n",
    "                             (\"Down to Earth (1st to 4th storey)\", \"Middle Range (5th to 9th storey)\", \n",
    "                              \"High Range (10th to 15th storey)\", \"Skyscraper (16th storey and above)\"))    \n",
    "\n",
    "    full_flat_type = st.selectbox(\"Postal Sector?\", \n",
    "                             (\"01, 02, 03, 04, 05, 06 Raffles Place, Cecil, Marina, People's Park\", \n",
    "                              \"07, 08 Anson, Tanjong Pagar\",\n",
    "                              \"14, 15, 16 Queenstown, Tiong Bahru\",\n",
    "                              \"09, 10 Telok Blangah, Harbourfront\",\n",
    "                              \"11, 12, 13 Pasir Panjang, Hong Leong Garden, Clementi New Town\",\n",
    "                              \"17 High Street, Beach Road (part)\",\n",
    "                              \"18, 19 Middle Road, Golden Mile\",\n",
    "                              \"20, 21 Little India\",\n",
    "                              \"22, 23 Orchard, Cairnhill, River Valley\",\n",
    "                              \"24, 25, 26, 27 Ardmore, Bukit Timah, Holland Road, Tanglin\",\n",
    "                              \"28, 29, 30 Watten Estate, Novena, Thomson\",\n",
    "                              \"31, 32, 33 Balestier, Toa Payoh, Serangoon\",\n",
    "                              \"34, 35, 36, 37 Macpherson, Braddell\",\n",
    "                              \"38, 39, 40, 41 Geylang, Eunos\",\n",
    "                              \"42, 43, 44, 45 Katong, Joo Chiat, Amber Road\",\n",
    "                              \"46, 47, 48 Bedok, Upper East Coast, Eastwood, Kew Drive\",\n",
    "                              \"49, 50, 81 Loyang, Changi\",\n",
    "                              \"51, 52 Tampines, Pasir Ris\",\n",
    "                              \"53, 54, 55, 82 Serangoon Garden, Hougang, Punggol\",\n",
    "                              \"56, 57 Bishan, Ang Mo Kio\",\n",
    "                              \"58, 59 Upper Bukit Timah, Clementi Park, Ulu Pandan\",\n",
    "                              \"60, 61, 62, 63, 64 Jurong\",\n",
    "                              \"65, 66, 67, 68 Hillview, Dairy Farm, Bukit Panjang, Choa Chu Kang\",\n",
    "                              \"69, 70, 71 Lim Chu Kang, Tengah\",\n",
    "                              \"72, 73 Kranji, Woodgrove\",\n",
    "                              \"77, 78 Upper Thomson, Springleaf\",\n",
    "                              \"75, 76 Yishun, Sembawang\",\n",
    "                              \"79, 80 Seletar\"))    \n",
    "    \n",
    "\n",
    "    mid = left.number_input(\"Floor Level\", step=1.0, format='%.1f', value=15.0)\n",
    "    #population = right.number_input('Population of people within a block', step=1.0, format='%.1f', value=250.0)\n",
    "    #households = left.number_input('Poplulation of a household',  step=1.0, format='%.1f', value=43.0)\n",
    "    #median_income = right.number_input('Median_income of a household in Dollars', step=1.0, format='%.1f', value=3000.0)\n",
    "    #ocean_proximity = st.selectbox('How close to the sea is the house?', ('<1H OCEAN', 'INLAND', 'NEAR OCEAN', 'NEAR BAY', 'ISLAND'))\n",
    "    \n",
    "    button = st.button('Predict')\n",
    "    \n",
    "    # if button is pressed\n",
    "    if button:\n",
    "        # make prediction\n",
    "        result = predict(longitude, latitude, housing_median_age, total_rooms,total_bedrooms,\n",
    "                         population, households, median_income, ocean_proximity)\n",
    "        st.success(f'The value of the house is ${result}')\n",
    "\n",
    "\n",
    "# load the train model\n",
    "#with open('rf_model.pkl', 'rb') as rf:\n",
    "#    model = pickle.load(rf)\n",
    "\n",
    "# load the StandardScaler\n",
    "#with open('scaler.pkl', 'rb') as stds:\n",
    "#    scaler = pickle.load(stds)\n",
    "\n",
    "#def predict(longitude, latitude, housing_median_age, total_rooms, total_bedrooms,\n",
    "#            population, households, median_income, ocean_pro):\n",
    "#    # processing user input\n",
    "#    ocean = 0 if ocean_pro == '<1H OCEAN' else 1 if ocean_pro == 'INLAND' else 2 if ocean_pro == 'ISLAND' else 3 if ocean_pro == 'NEAR BAY' else 4\n",
    "#    med_income = median_income / 5\n",
    "#    lists = [longitude, latitude, housing_median_age, total_rooms, total_bedrooms, population, households, med_income, ocean]\n",
    "#    df = pd.DataFrame(lists).transpose()\n",
    "#    # scaling the data\n",
    "#    scaler.transform(df)\n",
    "#    # making predictions using the train model\n",
    "#    prediction = model.predict(df)\n",
    "#    result = int(prediction)\n",
    "#    return result\n",
    "\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
